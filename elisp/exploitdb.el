;;; exploitdb.el --- The ExploitDB Emacs helm interfaces.
;;
;; Author: Sliim <sliim@mailoo.org>
;; Version: 1.0.0
;; Package-Requires: ((helm "1.6.3"))
;; Keywords: exploitdb emacs helm

;; This file is not part of GNU Emacs.

;;; Commentary:

;; Emacs helm interfaces for ExploitDB.
;; Look for files.csv, parse it and generate helm view.
;; CSV format:
;;   id,file,description,date,author,platform,type,port

;; Usage:
;;
;; Copy this file in your loadpath and:
;;
;;     M-x helm-searchsploit

;;; License:

;; This program is free software; you can redistribute it and/or
;; modify it under the terms of the GNU General Public License
;; as published by the Free Software Foundation; either version 3
;; of the License, or (at your option) any later version.
;;
;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
;; GNU General Public License for more details.
;;
;; You should have received a copy of the GNU General Public License
;; along with GNU Emacs; see the file COPYING. If not, write to the
;; Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
;; Boston, MA 02110-1301, USA.

;;; External libs:
(require 'cl)
(defun parse-csv-file (file)
  "Csv FILE parser.  Thanks syohex: https://gist.github.com/syohex/5487731."
  (interactive
   (list (read-file-name "CSV file: ")))
  (let ((buf (find-file-noselect file))
        (result nil))
    (with-current-buffer buf
      (goto-char (point-min))
      (while (not (eobp))
        (let ((line (buffer-substring-no-properties
                     (line-beginning-position) (line-end-position))))
          (push (split-string line ",") result))
        (forward-line 1)))
    (reverse result)))

;;; Code:
(require 'helm)
(require 'helm-utils)
(require 'helm-mode)
(require 'emamux)

(defcustom exploitdb-path "/usr/share/exploitdb/"
  "The ExploitDB path!"
  :type 'string)

(defcustom exploitdb-csvfile "files.csv"
  "The ExploitDB CSV file."
  :type 'string)

(defcustom exploitdb-workspace-path "/tmp"
  "Directory where exploits will be copied."
  :type 'string)

(defvar exploitdb/exploits-actions
  '(("Open" . (lambda (_candidate)
                (dolist (candidate (helm-marked-candidates))
                  (let ((file (exploitdb>get-path (exploitdb/get-id-from-c candidate))))
                    (alert (concat "Opening " file "..") :icon "kali-searchsploit" :title "ExploitDB" :category 'pwnage)
                    (find-file file)))))
    ("Copy" . (lambda (_candidate)
                (dolist (candidate (helm-marked-candidates))
                  (let ((file (exploitdb>get-path (exploitdb/get-id-from-c candidate))))
                    (copy-file file exploitdb-workspace-path)
                    (alert (concat "Copied " file " to " exploitdb-workspace-path "/" (file-name-nondirectory file)".") :icon "kali-searchsploit" :title "ExploitDB" :category 'pwnage)))
                (helm-searchsploit)))
    ("Create Tmux window" . (lambda (_candidate)
                              (dolist (candidate (helm-marked-candidates))
                                (let ((file (exploitdb>get-path (exploitdb/get-id-from-c candidate))))
                                  (emamux:tmux-run-command t
                                         "new-window" "-d"
                                         "-c" exploitdb-path
                                         "-n" (file-name-nondirectory file)
                                         "less" file)))
                              (helm-searchsploit))))
  "Helm exploitdb actions.")

(defvar exploitdb/c-source-exploits
  (helm-build-in-buffer-source "ExploitDB"
    :init (lambda ()
            (with-current-buffer (helm-candidate-buffer 'local)
              (insert (mapconcat 'identity (exploitdb>get-candidates) "\n"))))
    :action exploitdb/exploits-actions)
  "ExploitDB resources.")

(defun exploitdb/get-id-from-c (candidate)
  (substring candidate 0 (string-match ": " candidate)))

(defun exploitdb>get-exploits ()
  (when (not (boundp 'exploits-list))
    (alert "Reading exploits file. This may take a while.." :icon "kali-searchsploit" :title "ExploitDB" :category 'pwnage)
    (setq exploits-list (parse-csv-file (expand-file-name (concat exploitdb-path exploitdb-csvfile))))
    (pop exploits-list) ;; Remove first line id,file,etc..
    (alert "Exploits list parsed!" :icon "kali-searchsploit" :title "ExploitDB" :category 'pwnage))
  exploits-list)

(defun exploitdb>get-exploit (id)
  (let ((exploits (exploitdb>get-exploits)))
    (while (and exploits
                (not (boundp 'sploit)))
      (let ((exploit (pop exploits)))
        (when (string= id (car exploit))
          (setq sploit exploit)))))
  (let ((s sploit))
    (makunbound 'sploit)
    s))

(defun exploitdb>get-candidates ()
  (when (not (boundp 'candidates))
    (setq candidates '())
    (let ((exploits (exploitdb>get-exploits)))
      (alert "Generating candidates.." :icon "kali-searchsploit" :title "ExploitDB" :category 'pwnage)
      (while exploits
        (let ((exploit (pop exploits)))
          (let ((id (pop exploit))
                (file (pop exploit))
                (desc (pop exploit))
                (date (pop exploit))
                (author (pop exploit))
                (platform (pop exploit))
                (type (pop exploit)))
            ;; FIXME: Take several time..
            (add-to-list 'candidates (concat id ": [" type "] [" platform "] " desc)))))
      (alert "Candidates generated." :icon "kali-searchsploit" :title "ExploitDB" :category 'pwnage)))
  candidates)

(defun exploitdb>get-ids ()
  (let ((exploits (exploitdb>get-exploits)))
    (mapcar 'car exploits)))

(defun exploitdb>get-path (id)
  (let ((exploit (exploitdb>get-exploit id)))
    (let ((id (pop exploit))
          (file (expand-file-name (concat exploitdb-path "/" (pop exploit)))))
      file)))

;;;###autoload
(defun helm-searchsploit ()
  "Search sploit with Emacs Helm interface."
  (interactive)
  (helm :sources '(exploitdb/c-source-exploits)
        :candidate-number-limit 1000
        :buffer "*exploitdb*"
        :prompt "search> "
        :full-frame t))

(provide 'exploitdb)

;;; exploitdb.el ends here

#!/usr/bin/env python
# -*- coding:utf-8 -*-
from os import sys, path
sys.path.append(path.dirname(path.dirname(path.abspath(__file__))))

import time
import rpcutils
import cmd
import sys
from threading import Timer

class MsfConsoleModule(cmd.Cmd):
    def __init__(self):
        self.locked = False
        self.client = rpcutils.login()

        if len(sys.argv) < 3:
            print 'What?!'
            exit(1)

        self.cid = self.client.call("console.create", [{}])["id"]
        time.sleep(1)
        res = self.read_data()
        banner = res["data"]
        self.prompt = res["prompt"]

        print banner
        print "MSF console %s is ready!" % self.cid

        cmds = []
        cmds.append("use %s" % sys.argv[1])
        if len(sys.argv) == 4:
            opts = rpcutils.parse_module_opts(sys.argv[3])
            for k, v in opts:
                cmds.append("set %s %s" % (k, v))
        cmds.append(sys.argv[2])
        cmds.append("")

        for c in cmds:
            print c
            self.onecmd(c + "\r\n")

        self.set_timer()
        cmd.Cmd.__init__(self)

    def read_data(self):
        return self.client.call("console.read", [self.cid])

    def set_timer(self):
        self.refresh_timer = Timer(10.0, self.refresh)
        self.refresh_timer.start()

    def wait_lock(self):
        while True:
            if not self.locked:
                break
            time.sleep(2)

    def lock(self):
        self.locked = True

    def unlock(self):
        self.locked = False


    def refresh(self):
        self.wait_lock()
        self.lock()
        try:
            res = self.read_data()
            if res.get("data") and len(res.get("data")) > 2:
                print res.get("data")
                sys.stdout.write(self.prompt)
                sys.stdout.flush()
        except Exception as e:
            print e.message
        finally:
            self.unlock()
            self.set_timer()

    def onecmd(self, cmd):
        self.wait_lock()
        self.lock()

        if cmd in ["exit", "EOF"]: self.do_exit(cmd); return True
        self.client.call("console.write", [self.cid, cmd + "\r\n"])
        time.sleep(1)
        result = []
        while True:
            res = self.read_data()
            if res.get("data"):
                result.append(res.get("data"))
            if res.get("prompt"):
                self.prompt = res.get("prompt")
            if not res.get("busy"):
                break
            time.sleep(3)
        print "\n".join(result)
        self.unlock()

    def do_help(self):
        self.onecmd("help")

    def do_exit(self, s):
        self.refresh_timer.cancel()
        print "Destroy console ID %s.. %s" % (self.cid, self.client.call("console.destroy", [self.cid])["result"])
        return True
    do_EOF = do_exit

if __name__ == '__main__':
    MsfConsoleModule().cmdloop()

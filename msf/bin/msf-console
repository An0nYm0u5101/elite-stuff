#!/usr/bin/env python
# -*- coding:utf-8 -*-
from os import sys, path
sys.path.append(path.dirname(path.dirname(path.abspath(__file__))))

import rpcutils

class MsfConsole(rpcutils.MsfCmd):
    def __init__(self):
        rpcutils.MsfCmd.__init__(self)

        if len(sys.argv) == 2:
            self.cid = sys.argv[1]
            self.client.call("console.write", [self.cid, "banner\r\n"])
            res = self.client.call("console.read", [self.cid])
            if res.get("result") == "failure":
                raise ValueError, "Cannot attach to console #%s" % self.cid
        else:
            self.cid = self.client.call("console.create", [{}])["id"]
            time.sleep(1)
            res = self.read_data()

        banner = res["data"]
        self.prompt = res["prompt"]

        print banner
        print "MSF console %s is ready!" % self.cid

    def read_data(self):
        return self.client.call("console.read", [self.cid])

    def onecmd(self, cmd):
        self.wait_lock()
        self.lock()

        if cmd in ["exit", "EOF"]: self.do_exit(cmd); return True
        self.client.call("console.write", [self.cid, cmd + "\r\n"])
        time.sleep(1)
        result = []
        while True:
            res = self.read_data()
            if res.get("data"):
                result.append(res.get("data"))
            if res.get("prompt"):
                self.prompt = res.get("prompt")
            if not res.get("busy"):
                break
            time.sleep(3)
        print "\n".join(result)
        self.unlock()

    def do_exit(self, s):
        self.refresh_timer.cancel()
        print "Destroy console ID %s.. %s" % (self.cid, self.client.call("console.destroy", [self.cid])["result"])
        return True

if __name__ == '__main__':
    MsfConsole().cmdloop()
